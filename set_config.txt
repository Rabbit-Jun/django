가상환경으로 venv를 사용 v는 virtual를 의미한다.
env는 enviroment를 의미한다.

python -m venv [가상환경 이름](파이썬 모듈 중 venv라는 모듈을 사용하여 가상 디렉토리 생성)
가상환경 디렉토리로 이동 후 -> scripts 디렉토리(cd scripts) -> activate bat 실행-> 가상환경 안에서 -> pip install Django (장고 설치)
python -m django --version (당고 버전 확인)

(나는 안되서 .\activate 로 가상환경에 들어갔음)
가상환경을 빠져나오는 방법 -> deactivate

장고 프레임워크 삭제 (pip 프로그램을 이용하여 설치하는거라면 내부적으로 구버전에 대한 부분을 삭제하고 설치하므로 고민할 필요 x)
수동 설치 시에는 장고가 설치된 디렉토리로 이동해서 명령어 등으로 삭제 후 진행
(c드라이브에 바로 프로그램을 설치하는 것은 좋지 않음, 폴더를 만들고 그 안에 가상환경이든 프로그램을 설치하기를 권장)

pip install [프로그램] (버전을 명시하여 설치 할 수도 있다) 
(ex) pip install Django ==3.2.9
pip uninstall [프로그램]

md (make diretory)
rd (remove directory) ( 이 명령어는 비어 있는 디렉토리만 제거할 수 있으며)
/s 옵션 :서브 디렉토리까지 삭제할 것인지 물음 (가상환경 까지 통째로 )
(EX) rd /s [디렉토리 이름]


django-admin startproject [프로젝트이름] (프로젝트 폴더 및 관련 파일들이 자동 생성, 가상환경에서 실행해줘야 한다)

startproject로 만든 프로젝트안에 각각의 프로그램을 넣어서 하나의 큰 프로그램(application)을 만드는 거다

프로젝트 안에 작은프로그램 하나를 추가하고 싶으면 startapp [프로그램이름]
(startproject로 만들어진 폴더는 최상위 폴더로서 여러가지 환경 정보 url패턴을 가지고 있다고 생각하면 됨)
    settings.py( 프로젝트내 환경구성 등 여러 설정 정보를 담고 있다)
    urls.py (URL패턴 등 패스 관련 여러 정보를 담고 있음)

runserver (django에서는 기본적으로 8000번 서버를 사용한다)

manage.py (무언가를 해내기 위한 파일,서버 구동 등...)

python manage.py runserver (http://localhost:8000/)
(py manage.py runserver라고 쳐도 된)
 
 서버 구동은 manage.py 파일 있는 곳에서 실행

 py manage.py runserver 9090 (이렇게 입려가면 포트번호가 9090으로 변경된다)

 py manage.py createsuperuser (수퍼유저 생성, 기본 테이블을 생성하고 해야한다)

 py manage.py migrate (기본 테이블 생성) (migrate: 이행하다) (migration: 이행)

 localhost:8000/admin (관리자 페이지)

 장고는 파이썬으로 개발된 오픈 소스 웹 프레임워크.
 기본적으로 모델(m)- 뷰(v) -컨트롤러(c)패턴을 따른다.
 데이터베이스와 연동된 웹사이트 개발을 초보자라도 편리하고 쉡게 개발할 수 있도록 해주는 것을 목표로 만들어졌다.

 뷰는 사용자가 보게되는 페이지 
 컨트롤러는 요청에 따른 적절한 뷰를 구분해줌
 
 프레임워크 장점
 프레임워크는 기본적으로 틀을 생각하면 쉽다.
 규칙이 적용된 틀 안에서 규칙과 가이드대로 개발을 해나가면 초보자라도 품질 좋은 웹사이트를 만들 수 있다.
 모든 생활시설 및 가전제품들이 다 구비된 빌트인 아파트를 생각하면 쉽다. 규칙대로 살아가기만 하면 된다.
 유지보수 등을 위한 직원 및 개발팀의 충원이나 연속성이 비프레임워크에 비해서 상대적으로 보장된다.
 안정성, 통합성, 유지보수, 효울성, 단축성, 확장성 등 일관성있게 추진이 가능하다.
 가장 큰 장점은 초보자라도 경력자가 만든 것과 같은 상당한 수준의 퀄리티있는 웹사이트를 개발해낼 수 있다는 것이다.
 프레임워크를 사용하지 않고 초보자가 경력자와 같은 품질의 웹을 개발한다는 것은 거의 불가능이다.

 프레임워크 단점

 프레임워크의 가장 단점은 학습곡선이 만만치 않다는 것이다. 즉, 배우는 것이 어렵다.
 모던한 개발 방식이 많아 도입되는 편이라서 기존 전통적인 방식으로 웹개발을 해온 사람들에게는 새로움이 많다.
 대부분의 경우 웹개발 경험이 전무한 초보자라면 거의 불가능에 가깝다
 설령 경험자라 하더라도 독학으로는 많은 시간이 걸리며, 수 많은 시행착오와 오류에서 혼자 헤쳐나가기는 매우 힘들다.
 규칙과 가이드에서 벗어나는 것을 대부분의 프레임워크가 허용하지 않는다.
 제공하는 틀안에서 모든 것을 규칙에 맞게 그리고 가이드에 맞게 개발해나가야지만 원할한 개발이 가능하다.
 기존의 전통적인 방식으로 개발된 웹사이트와 통합하기가 쉽지 않다. 새롭게 만드는 것이 더 효율.
 그러나 익숙해지고 숙달되면 쉽고 편리하게 웹개발이 가능하다.

가상환경이란 무엇인가?

가상 환경은 웹 개발 프로젝트를 진행할 때 독립된 환경을 구축해준다. 이것은 매우 큰 장점이다.
웹 개발 프로젝트 성격에 따라 프로젝트에 사용되는 라이브러리나 관련 버전들이 다를 수 있다.
이때 가상환경 도구를 이용하여 각각의 프로젝트에 맞는 독립된 환경을 구축할 수 있다
개발자의 pc 한 곳에 각각 파이썬 및 장고 그 외 라이브러리 들을 버전별로 맞춰서 셋팅을 할 수 있다.
여러 개의 프로젝트를 만드는 것이 아니라면 사실 가상환경이 필요없을 수도 있지만 필요성 및 중요성은 계속 커지는 중
가상환경 구축 툴이 여러 개 있는데 파이썬내 모듈인 venv 모듈을 사용하여 아래처럼 구축한다.

python -m venv [가상환경이름] -> 파이썬내 venv라는 모듈을 사용하여 구축

project와 application
기본적으로 프로젝트는 가장 큰 또는 최상위의 웹 개발 디렉토리(폴더)라고 생각하면 된다.
웹 개발 시 최상위 폴더를 생성하고 개발을 해나가는데 이것은 결국 해당 웹사이트의 루투 폴더가 되고 곧 프로젝트다.
이 안에 여러 개의 프로그램(회원가입, 게시판, 설문조사 등)을 만들어 넣을 수 있는데 이를 'app'이라 부른다.
결국, 이런 여러 개의 앱들이 모여서 하나의 프로젝트가 되고 이는 곧 하나의 웹사이트가 된다.

장고에서 프로젝트 생성은 명령 프롬프트에서 django-admin startproject 프로젝트명 입력하고 생성.
보통은 위와 같이 생성을 하는데 이렇게 생성 시 같은 프로젝트명으로 환경설정 폴더가 생성이 된다는 것을 명심
별도의 환경설정 폴더명을 가지는 방식으로 생성하는 것도 가능하나 장고 학습 시에는 이렇게 하는 것도 큰 상관은 없다
앱 생성은 python manage.py startapp [앱명] 으로 생성한다.

django에서 model이란

모델은 데이터 또는 데이터베이스를 우선적으로 연상하면 된다.
django는 모델을 이용하여 데이터 및 데이터베이스 연동 작업을 처리한다고 생각하면 된다.
일반적으로 프레임워크가 데이터베이스 연동 작업 시 데이터를 처리(crud)하기 위해서 sql  쿼리문을 이용
model파일을 이용해 db관련된 작업을 하는 것
django는 sql이 아닌 코드만으로 db를 조작할 수 있다.(이때 적용시켜줘야 앱에 적용하기 위해 migrate해줘야 한다)
(그러나 큰 규모의 프로젝트에서 코드만을 이용하여 DB를 구성하는 것은 많은 시간이 걸릴 수 있으므로 코드와 sql을 같이 이용하여 db를 구성한다)

앱이란 무엇인가?
    -기본적으로 app =application ==program(프로그램) 같은 의미로 생각하면 됨

project VS app 
    -프로젝트는 큰 개념이고 앱은 그 하위의 작은 개념
    -큰 프로젝트 안에서 필요한 프로그램들의 단위가 앱으로써 회원강ㅂ, 게시판, 설문조사 등의 앱이 있을 수 있음
    -즉, 앱은 프로젝트내에서 특정한 기능을 수행하는 프로그램 단위.

앱 생성 명령어
    py manage.py startapp [앱 이름]

[앱 ] 폴더 생성 및 파일들
    -migrations (폴더)
    -admin.py
    -views.py
    -models.py
    -urls.py(수동으로 생성해줘야 하는 파일. 최상위 URLconf와의 연결을 위하여 필요하며 최상위(django admin startprject로 만든 urls.py에 있음) )

(django admin startproject [프로젝트 이름]으로 만들어진 앱은 urls.py 자동으로 생성되어있다.)


최상위 urls.py --> urlpatterns -->앱패스 추가
    -path('주소이름/',어떤걸(view)호출 할지) 
    (ex. include함수를 이용하여 하위 폴더의 urls.py를 가져온다)
    (include('앱이름.urls') .을 찍어 하위폴더임을 표현) #include 임포트 안하면 서버 구동시 에러.
    -path('admin/',admin.site.urls) (기본적으로 등록되어 있는 path)

include()함수
    -다른 URLconf패스들을 참조할 수 있도록 해주는 함수. 앱 구동 및 연결 시 중요한 역할을 하는 함수.

New-Item -Path .\[urls.py] -ItemType file (poweshell 에서 경로 파일 하나 만드는 방법)
New-Item -ItemType file [파일이름]


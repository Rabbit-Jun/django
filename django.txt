가상환경으로 venv를 사용 v는 virtual를 의미한다.
env는 enviroment를 의미한다.

python -m venv [가상환경 이름](파이썬 모듈 중 venv라는 모듈을 사용하여 가상 디렉토리 생성)
가상환경 디렉토리로 이동 후 -> scripts 디렉토리(cd scripts) -> activate bat 실행-> 가상환경 안에서 -> pip install Django (장고 설치)
python -m django --version (당고 버전 확인)

(나는 안되서 .\activate 로 가상환경에 들어갔음)
가상환경을 빠져나오는 방법 -> deactivate

장고 프레임워크 삭제 (pip 프로그램을 이용하여 설치하는거라면 내부적으로 구버전에 대한 부분을 삭제하고 설치하므로 고민할 필요 x)
수동 설치 시에는 장고가 설치된 디렉토리로 이동해서 명령어 등으로 삭제 후 진행
(c드라이브에 바로 프로그램을 설치하는 것은 좋지 않음, 폴더를 만들고 그 안에 가상환경이든 프로그램을 설치하기를 권장)

pip install [프로그램] (버전을 명시하여 설치 할 수도 있다) 
(ex) pip install Django ==3.2.9
pip uninstall [프로그램]

md (make diretory)
rd (remove directory) ( 이 명령어는 비어 있는 디렉토리만 제거할 수 있으며)
/s 옵션 :서브 디렉토리까지 삭제할 것인지 물음 (가상환경 까지 통째로 )
(EX) rd /s [디렉토리 이름]


django-admin startproject [프로젝트이름] (프로젝트 폴더 및 관련 파일들이 자동 생성, 가상환경에서 실행해줘야 한다)

startproject로 만든 프로젝트안에 각각의 프로그램을 넣어서 하나의 큰 프로그램(application)을 만드는 거다

프로젝트 안에 작은프로그램 하나를 추가하고 싶으면 startapp [프로그램이름]
(startproject로 만들어진 폴더는 최상위 폴더로서 여러가지 환경 정보 url패턴을 가지고 있다고 생각하면 됨)
    settings.py( 프로젝트내 환경구성 등 여러 설정 정보를 담고 있다)
    urls.py (URL패턴 등 패스 관련 여러 정보를 담고 있음)

runserver (django에서는 기본적으로 8000번 서버를 사용한다)

manage.py (무언가를 해내기 위한 파일,서버 구동 등...)

python manage.py runserver (http://localhost:8000/)
(py manage.py runserver라고 쳐도 된)
 
 서버 구동은 manage.py 파일 있는 곳에서 실행

 py manage.py runserver 9090 (이렇게 입려가면 포트번호가 9090으로 변경된다)

 py manage.py createsuperuser (수퍼유저 생성, 기본 테이블을 생성하고 해야한다)

 py manage.py migrate (기본 테이블 생성) (migrate: 이행하다) (migration: 이행)

 localhost:8000/admin (관리자 페이지)